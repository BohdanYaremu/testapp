{"version":3,"sources":["components/TransactionList.js","redux/reducer.js","api/api.js","components/TransactionListContainer.js","components/AddTranaction.js","components/AddTransactionContainer.js","App.js","serviceWorker.js","redux/reduxStore.js","index.js"],"names":["TransactionList","props","transactions","map","i","key","id","date","item","price","onClick","deleteTransactionAC","initialState","transaction","currency","PLN","USD","reducer","state","action","type","filter","formData","data","currencyTC","dispatch","axios","then","response","rates","addCurrencyAC","connect","transactionReducer","AddTransaction","AddTransactionFormRedux","onSubmit","length","curusd","usd","pln","addTransaction","cureur","resetFormAC","reduxForm","form","nowX","Date","toISOString","slice","replace","handleSubmit","Field","placeholder","name","component","AddTransactionContainerClass","this","React","Component","addTransactionAC","reset","App","className","AddTransactionContainer","TransactionListContainer","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4edf2ca.chunk.js","sourcesContent":["import React from 'react';\n\n\n\n\n\nconst TransactionList = (props) => {\n\n  return (\n      <div>\n        {props.transactions.map(i => <div key={i.id}>\n        <div>\n          {i.date}     {i.item}    {i.price}\n          <div>\n              <button onClick={()=>{props.deleteTransactionAC(i.id)}}>Delete transaction</button>\n          </div>\n        </div>\n\n      </div>)}\n\n      </div>\n  );\n}\n\nexport default TransactionList;\n","import {getCurrency} from \"../api/api\";\n\nlet ADD_TRANSACTION = 'ADD_TRANSACTION';\nlet ADD_CURRENCY = 'ADD_CURRENCY';\nlet DELETE_TRANSACTION = 'DELETE_TRANSACTION';\n\n\nlet initialState = {\n    transaction: [\n        {id: 0, date: '2017-04-25', item: 'Jogurt', price: 3},\n        {id: 1, date: '2017-04-25', item: 'French Fries', price: 2},\n        {id: 2, date: '2017-04-27', item: 'Beer', price: 4.75},\n        {id: 3, date: '2017-04-25', item: 'French Fries', price: 3},\n        {id: 4, date: '2017-04-26', item: ' Sweets', price: 2.75},\n\n    ],\n    currency: {\n        PLN: 4.468206,\n        USD: 1.121805}\n\n}\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case DELETE_TRANSACTION: {\n            return {...state, transaction: state.transaction.filter(i=> i.id !==action.id)}\n        }\n        case ADD_TRANSACTION: {\n            return {...state, transaction: [...state.transaction, action.formData]}\n        }\n        case ADD_CURRENCY: {\n\n            return {...state, currency:  action.data}\n        }\n\n        default:\n            return state;\n\n    }\n\n    return state;\n}\nexport default reducer;\n\nexport const deleteTransactionAC = (id) => ({type: DELETE_TRANSACTION, id})\nexport const addTransactionAC = (formData) => ({type: ADD_TRANSACTION, formData})\nexport const addCurrencyAC = (data) => ({type: ADD_CURRENCY, data})\n\nexport const currencyTC = () => {\n    return (dispatch) => {\n        getCurrency().then(data => {\n\n            dispatch(addCurrencyAC(data))\n        });\n    }\n}\n","import * as axios from \"axios\";\r\n\r\nexport const getCurrency=()=>{\r\n  return(\r\n      axios.get(\"http://data.fixer.io/api/latest?access_key=c0edbcedb50dd4a7662f6478d476f857&base=EUR&symbols=USD,PLN\")\r\n          .then(response =>{\r\n            return response.data.rates\r\n          })\r\n  )\r\n}\r\n\r\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport TransactionList from \"./TransactionList\";\nimport {addTransactionAC, deleteTransactionAC} from \"../redux/reducer\";\n\nlet mapStateToProps = (state) =>{\n  return {\n    transactions: state.transactionReducer.transaction\n  }\n}\nlet mapStateToDispatch = (dispatch) =>{\n  return(\n      {\n        deleteTransactionAC:(id)=>{\n          dispatch (deleteTransactionAC(id))\n        },\n\n      }\n  )\n}\n\nexport default connect(mapStateToProps, mapStateToDispatch)(TransactionList)\n\n","import React from 'react';\nimport {Field, reduxForm} from \"redux-form\";\nimport {currencyTC} from \"../redux/reducer\";\n\nexport const AddTransaction = (props) =>{\n    let onSubmit = (formData) => {\n        formData.id = props.transactions.length\n        if (formData.curusd) {\n            formData.price = formData.price/props.usd * props.pln\n            return  props.addTransaction(formData)\n\n        }else if (formData.cureur) {\n            formData.price = formData.price* props.pln\n            return  props.addTransaction(formData)\n        }\n\n        props.addTransaction(formData)\n        props.resetFormAC(\"addtransaction\")\n\n\n    }\n\n    return(\n        <div>\n            <div>\n                Add Transaction\n            </div>\n            <div>\n                <AddTransactionFormRedux onSubmit={onSubmit}/>\n            </div>\n            {currencyTC()}\n        </div>\n    )\n}\n\n\nconst AddTransactionForm=(props)=>{\nlet x = new Date()\n    let nowX = x.toISOString().slice(0,10).replace(/-/g,\"-\");\n    return(\n\n        <form onSubmit={props.handleSubmit}>\n            <div> <Field placeholder = {\"Item\"} name ={\"item\"}  component = {\"input\"} /></div>\n            <div> <Field placeholder = {nowX} name ={\"date\"} component = {\"input\"} /></div>\n            <div> <Field placeholder = {\"Price\"} name ={\"price\"} component = {\"input\"}/></div>\n            <div> <Field type = {\"checkbox\"} name ={\"curusd\"} component = {\"input\"}/>USD</div>\n            <div> <Field type = {\"checkbox\"} name ={\"cureur\"} component = {\"input\"}/>EUR</div>\n            <div> <Field type = {\"checkbox\"} name ={\"curoln\"} component = {\"input\"}/>PLN</div>\n\n            <div> <button>Add</button></div>\n        </form>\n    )\n}\n\nconst AddTransactionFormRedux = reduxForm({form:'addtransaction'})(AddTransactionForm)","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {AddTransaction} from \"./AddTranaction\";\nimport {addTransactionAC, currencyTC} from \"../redux/reducer\";\nimport {getCurrency} from \"../api/api\";\nimport {reset} from \"redux-form\";\n\n\nclass AddTransactionContainerClass extends React.Component{\n  /*componentDidMount() {\n    this.props.currencyTC()\n  }*/\n  render() {\n    return(\n        <AddTransaction addTransaction={this.props.addTransaction}\n                        pln={this.props.pln}\n                        usd={this.props.usd}\n                        transactions={this.props.transactions}\n                        resetFormAC={this.props.resetFormAC}\n        />\n    )\n  }\n}\n\nlet mapStateToProps = (state) =>{\n  return {\n    transactions: state.transactionReducer.transaction,\n    pln: state.transactionReducer.currency.PLN,\n    usd: state.transactionReducer.currency.USD\n  }\n}\nlet mapStateToDispatch = (dispatch) =>{\n  return{\n    addTransaction:(formData)=>{\n      dispatch (addTransactionAC(formData))\n    },\n    currencyTC:()=>{\n      dispatch (currencyTC())\n    },\n    resetFormAC:(form)=>{\n      dispatch (reset(form))\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapStateToDispatch)(AddTransactionContainerClass)","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport TransactionListContainer from \"./components/TransactionListContainer\";\nimport AddTransactionContainer from \"./components/AddTransactionContainer\";\n\nconst App = () => {\n  return (\n      <BrowserRouter>\n    <div className=\"App\">\n        }\n      <div className=\"header\">Header</div>\n      <div className=\"addtransaction\"><AddTransactionContainer/></div>\n      <div className=\"transactionlist\">\n          <TransactionListContainer/>\n      </div>\n\n    </div></BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore,} from \"redux\";\nimport { reducer as formReducer } from 'redux-form';\nimport thunkMiddleware from \"redux-thunk\"\n\nimport reducer from \"./reducer\";\n\nlet reducers = combineReducers({\n    transactionReducer: reducer,\n    form: formReducer\n\n})\n\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\nwindow.store =store;\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/reduxStore\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store = {store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}